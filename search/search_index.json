{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#pdf-to-markdown","title":"PDF to Markdown","text":"<p>A clean template to kickstart your deep learning project \ud83d\ude80\u26a1\ud83d\udd25 Click on Use this template to initialize new repository.</p> <p>Suggestions are always welcome!</p>"},{"location":"#description","title":"Description","text":"<p>This is a template for you to use for any project. It has all the actions set up for you to use.</p>"},{"location":"#for-more-info-check-the-docs","title":"For More info, check the Docs","text":""},{"location":"Reference/pdf2md/pdf2md/","title":"Pdf2md","text":""},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DescribeImagesOutput","title":"DescribeImagesOutput","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DescribeImagesOutput.image_url","title":"image_url","text":"<pre><code>image_url: str = Field(\n    ...,\n    description=\"The image urls you want to describe, it should be a string of path that pair with the question.\",\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DescribeImagesOutput.answer","title":"answer","text":"<pre><code>answer: str = Field(\n    ..., description=\"The answer to the question you asked.\", frozen=False, deprecated=False\n)\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter","title":"DocsConverter","text":"<p>               Bases: <code>BaseModel</code></p> <p>Methods:</p> Name Description <code>to_markdown</code> <code>parse_docs_with_images</code>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.path","title":"path","text":"<pre><code>path: str = Field(\n    default=\"./docs\",\n    description=\"The path of the docs you want to convert, it can be either a file or a directory.\",\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.max_processes","title":"max_processes","text":"<pre><code>max_processes: int = Field(\n    default=10,\n    description=\"The maximum number of processes to use for conversion.\",\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.all_docs_paths","title":"all_docs_paths","text":"<pre><code>all_docs_paths: list[Path]\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.semaphore","title":"semaphore","text":"<pre><code>semaphore: Semaphore\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.client","title":"client","text":"<pre><code>client: AsyncAzureOpenAI\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.to_markdown","title":"to_markdown","text":"<pre><code>to_markdown() -&gt; None\n</code></pre> Source code in <code>src/pdf2md/pdf2md.py</code> <pre><code>async def to_markdown(self) -&gt; None:\n    all_docs_paths = [\n        f for f in self.all_docs_paths if f.suffix == \".pdf\" or f.suffix == \".txt\"\n    ]\n\n    if not all_docs_paths:\n        logfire.warn(\"No pdf files found in the path.\")\n        return\n\n    config = {\"languages\": \"en\", \"output_format\": \"markdown\", \"output_dir\": \"parsed\"}\n    config_parser = ConfigParser(config)\n\n    converter = PdfConverter(\n        config=config_parser.generate_config_dict(),\n        artifact_dict=create_model_dict(),\n        processor_list=config_parser.get_processors(),\n        renderer=config_parser.get_renderer(),\n        llm_service=config_parser.get_llm_service(),\n    )\n    for docs_path in all_docs_paths:\n        output_dir = docs_path.with_suffix(\"\")\n        output_dir = output_dir.with_name(output_dir.name.replace(\" \", \"_\"))\n        if output_dir.is_dir() and output_dir.exists():\n            logfire.info(\"Skip existing dir\", source=docs_path, output=output_dir.as_posix())\n            continue\n        output_dir.mkdir(parents=True, exist_ok=True)\n        if docs_path.suffix == \".pdf\":\n            logfire.info(\"Converting PDF...\", source=docs_path)\n            rendered = converter(filepath=docs_path.as_posix())\n            parsed_name = docs_path.stem.replace(\" \", \"_\")\n            save_output(\n                rendered=rendered, output_dir=output_dir.as_posix(), fname_base=parsed_name\n            )\n        elif docs_path.suffix == \".txt\":\n            logfire.info(\"Converting TXT...\", source=docs_path)\n            content = docs_path.read_text(encoding=\"utf-8\")\n            # \u76f4\u63a5\u5c07\u5167\u5bb9\u5beb\u5165 markdown \u6a94\u6848\n            parsed_name = docs_path.stem.replace(\" \", \"_\")\n            output_file = output_dir / f\"{parsed_name}.md\"\n            output_file.write_text(content, encoding=\"utf-8\")\n        logfire.info(\"Converted Successfully\", source=docs_path, output=output_dir.as_posix())\n</code></pre>"},{"location":"Reference/pdf2md/pdf2md/#src.pdf2md.pdf2md.DocsConverter.parse_docs_with_images","title":"parse_docs_with_images","text":"<pre><code>parse_docs_with_images() -&gt; None\n</code></pre> Source code in <code>src/pdf2md/pdf2md.py</code> <pre><code>async def parse_docs_with_images(self) -&gt; None:\n    docs_paths = [f for f in self.all_docs_paths if f.name.endswith(\".md\")]\n    docs_paths = [f for f in docs_paths if not f.stem.endswith(\"_parsed\")]\n    if not docs_paths:\n        logfire.info(\"No parsed markdown files found in the path.\")\n        return\n    for docs_path in docs_paths:\n        docs_content = docs_path.read_text(encoding=\"utf-8\")\n        # Use regex to find the line starts with `![](_page` and ends with `)`\n        splitted_contents = docs_content.splitlines()\n        docs_parent = docs_path.parent\n        image_path_or_urls = []\n        image_mapping: dict[str, int] = {}\n        for line_idx, line in enumerate(splitted_contents, start=1):\n            if line.startswith(\"![](_page\") and line.endswith(\")\"):\n                image_path_string = line.split(\"](\")[1].split(\")\")[0]\n                image_path = docs_parent / image_path_string\n                if image_path.exists():\n                    image_url = image_path.absolute().as_posix()\n                    image_mapping[image_url] = int(line_idx)\n                    image_path_or_urls.append(image_url)\n        if not image_path_or_urls:\n            logfire.info(f\"No images found in {docs_path}.\", source=docs_path)\n            continue\n        # For debugging\n        # image_path_or_urls = image_path_or_urls[:1]\n        parsed_images = await self._describe_images(image_path_or_urls=image_path_or_urls)\n        for parsed_image in parsed_images:\n            found_line_idx = image_mapping.get(parsed_image.image_url)\n            if found_line_idx:\n                splitted_contents[line_idx - 1] = (\n                    f\"Here is the image description:\\n```\\n{parsed_image.answer}\\n```\"\n                )\n        parsed_content = \"\\n\".join(splitted_contents)\n        new_docs_path = docs_path.with_name(f\"{docs_path.stem}_parsed{docs_path.suffix}\")\n        new_docs_path.write_text(parsed_content, encoding=\"utf-8\")\n        logfire.info(\"Parsed Successfully\", source=docs_path, output=new_docs_path.as_posix())\n</code></pre>"},{"location":"Scripts/gen_docs/","title":"Gen docs","text":""},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator","title":"DocsGenerator","text":"<p>               Bases: <code>BaseModel</code></p> <p>DocsGenerator is a class that generates documentation for Python files or classes within a specified source directory.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>str</code> <p>The source directory or file path.</p> <code>output</code> <code>str</code> <p>The output directory path.</p> <code>exclude</code> <code>str</code> <p>Comma-separated list of folders or files to exclude.</p> <code>mode</code> <code>Literal['file', 'class']</code> <p>Mode of documentation generation, either by file or class.</p> <p>Methods:</p> Name Description <code>gen_docs</code> <p>Generates documentation by file or class.</p> <code>__call__</code> <p>Asynchronously calls the gen_docs method.</p> Using CLI <pre><code>python ./scripts/gen_docs.py --source ./src --output ./docs/Reference --exclude .venv gen_docs\n</code></pre> Using Rye <pre><code>uv run python ./scripts/gen_docs.py\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.source_path","title":"source_path","text":"<pre><code>source_path: Path = Field(\n    ...,\n    title=\"The Source File Path or Folder Path\",\n    description=\"This field can be a file path or folder path, if it is a folder path, it will automatically search for python and ipynb files.\",\n    examples=[\"./src\"],\n    alias=\"source\",\n    frozen=True,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.output_path","title":"output_path","text":"<pre><code>output_path: Path = Field(\n    ...,\n    title=\"The Output Path\",\n    description=\"The output path for the generated documentation.\",\n    examples=[\"./docs/Reference\"],\n    alias=\"output\",\n    frozen=True,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.exclude","title":"exclude","text":"<pre><code>exclude: str = Field(\n    default=\".venv\",\n    description=\"Exclude the folder or file, it should be separated by comma.\",\n    examples=[\".venv,.git,.idea\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.mode","title":"mode","text":"<pre><code>mode: Literal[\"file\", \"class\"] = Field(\n    default=\"class\",\n    title=\"The Document Style\",\n    description=\"Generate docs by file or class.\",\n    examples=[\"file\", \"class\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.source_files","title":"source_files","text":"<pre><code>source_files: list[Path]\n</code></pre> <p>Computed property that returns the source path as a Path object.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>list[Path]</code> <p>The source path.</p>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.gen_docs","title":"gen_docs","text":"<pre><code>gen_docs() -&gt; None\n</code></pre> Source code in <code>scripts/gen_docs.py</code> <pre><code>async def gen_docs(self) -&gt; None:\n    with Progress() as progress:\n        task = progress.add_task(\"[green]Generating docs...\")\n\n        progress.update(\n            task_id=task, description=\"[cyan]Files Found...\", total=len(self.source_files)\n        )\n\n        for source_file in self.source_files:\n            progress.update(\n                task_id=task,\n                advance=1,\n                description=f\"[cyan]Processing {source_file.as_posix()}...\",\n                refresh=True,\n            )\n            if source_file.suffix == \".ipynb\":\n                await self.__gen_notebook_docs(file=source_file)\n            elif source_file.suffix == \".py\":\n                await self.__gen_python_docs(file=source_file)\n            else:\n                console.log(f\"Unsupported file type: {source_file.suffix}\")\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/10/06/this-is-an-example-post-for-blog/","title":"This is an example post for blog","text":"<p>This is an simple example post for blog.</p>"},{"location":"installation/","title":"Installation","text":"<p>This page will guide you through the installation process this project.</p>"},{"location":"installation/#install-dependency-management-tool","title":"Install Dependency Management Tool","text":"uvRyeCondaPIP <p>Install uv</p> <pre><code>make uv-install\n</code></pre> <p>Install Rye</p> <pre><code>make rye-install\n</code></pre> <ul> <li>Please visit miniconda to install miniconda.</li> </ul> <pre><code>conda create -n plotly python=3.9 -y\nconda activate plotly\npip install uv\n</code></pre> <ul> <li>Please visit Python to install Python for using pip.</li> </ul> <pre><code>pip install uv\n</code></pre>"},{"location":"installation/#export-proxy-optional","title":"Export Proxy (Optional)","text":"uvRyeCondaPIP <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre>"},{"location":"installation/#installsetup-dependencies","title":"Install/Setup Dependencies","text":"uvRyeCondaPIP <pre><code>uv sync\n</code></pre> <pre><code>rye sync\n</code></pre> <pre><code>uv pip sync pyproject.toml\n</code></pre> <pre><code>uv pip sync pyproject.toml\n</code></pre> <ul> <li>Once you have done the above steps, you can run the following commands to start the application.</li> <li>If your environment is messed up, you can run <code>uv sync</code> again to fix it.</li> </ul>"}]}